{"version":3,"sources":["image/img1.jpg","image/img2.jpg","image/img3.jpg","components/TabGallery/TabGallery.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TabGallery","props","state","imageSrc","imageText","containerElm","React","createRef","containerBottomElm","ratioWHArray","ratio","split","ratioWH","updateDimensions","bind","showImage","hideImage","image","this","setState","src","caption","style","display","tabHeight","current","offsetWidth","input","length","height","bottomHeight","window","addEventListener","removeEventListener","className","ref","map","index","key","width","alt","onClick","Component","collection","img1","img2","img3","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,sNCItBC,G,wDACnB,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IAGDC,MAAQ,CACXC,SAAU,GACVC,UAAW,IAGb,EAAKC,aAAeC,IAAMC,YAC1B,EAAKC,mBAAqBF,IAAMC,YAEhC,IAAME,EAAe,EAAKR,MAAMS,MAAMC,MAAM,KAZ3B,OAajB,EAAKC,QAAUH,EAAa,GAAKA,EAAa,GAE9C,EAAKI,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,UAAY,EAAKA,UAAUF,KAAf,gBAjBA,E,sDAoBTG,GACRC,KAAKC,SAAS,CACZhB,SAAUc,EAAMG,IAChBhB,UAAWa,EAAMI,Y,kCAMnBH,KAAKC,SAAS,CACZhB,SAAU,GACVC,UAAW,KAIbc,KAAKV,mBAAmBc,MAAMC,QAAU,OACxCL,KAAKL,qB,yCAKL,IAAMW,EAAYN,KAAKb,aAAaoB,QAAQC,YAAcR,KAAKjB,MAAM0B,MAAMC,OAASV,KAAKN,QACzFM,KAAKb,aAAaoB,QAAQH,MAAMO,OAAhC,UAA4CL,EAA5C,MAEA,IAAMM,EAAeZ,KAAKV,mBAAmBiB,QAAQC,YAAcR,KAAKN,QACxEM,KAAKV,mBAAmBiB,QAAQH,MAAMO,OAAtC,UAAkDC,EAAlD,Q,0CAKAZ,KAAKL,mBACLkB,OAAOC,iBAAiB,SAAUd,KAAKL,oB,6CAKvCkB,OAAOE,oBAAoB,SAAUf,KAAKL,oB,2CAKd,KAAxBK,KAAKhB,MAAMC,WACbe,KAAKV,mBAAmBiB,QAAQH,MAAMC,QAAU,QAChDL,KAAKL,sB,+BAIC,IAAD,OACP,OACE,yBAAKqB,UAAU,kBACb,yBAAKA,UAAU,YAAYC,IAAKjB,KAAKb,cAEjCa,KAAKjB,MAAM0B,MAAMS,KAAI,SAACnB,EAAOoB,GAC3B,OACE,yBACEC,IAAKD,EACLH,UAAU,gBACVZ,MAAO,CACLiB,MAAM,GAAD,OAAK,EAAI,EAAKtC,MAAM0B,MAAMC,OAAS,IAAnC,KACLC,OAAO,SAGT,yBACEK,UAAU,QACVd,IAAKH,EAAMG,IACXoB,IAAKvB,EAAMI,QACXoB,QAAS,kBAAM,EAAK1B,UAAUE,WAQ1C,yBAAKiB,UAAU,mBAAmBC,IAAKjB,KAAKV,oBAC1C,yBACE0B,UAAU,QACVd,IAAKF,KAAKhB,MAAMC,SAChBqC,IAAKtB,KAAKhB,MAAME,YAElB,0BAAM8B,UAAU,YAAYO,QAAS,kBAAM,EAAKzB,cAAhD,QACA,yBAAKkB,UAAU,cAAchB,KAAKhB,MAAME,iB,GAtGVE,IAAMoC,Y,iDCIxCC,EAAa,CACjB,CAAEvB,IAAKwB,IAAMvB,QAAS,kBACtB,CAAED,IAAKyB,IAAMxB,QAAS,kBACtB,CAAED,IAAK0B,IAAMzB,QAAS,qBAGH0B,E,uKAEjB,OACE,yBAAKb,UAAU,OACb,2CACA,yFAEA,kBAAC,EAAD,CACEP,MAAOgB,EACPjC,MAAK,a,GATkBJ,IAAMoC,WCFnBM,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d5a153d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img1.e5aca032.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img2.eea3e601.jpg\";","module.exports = __webpack_public_path__ + \"static/media/img3.83902969.jpg\";","import React from 'react';\r\n\r\nimport './TabGallery.css';\r\n\r\nexport default class TabGallery extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n\r\n    this.state = {\r\n      imageSrc: \"\",\r\n      imageText: \"\",\r\n    }\r\n\r\n    this.containerElm = React.createRef();\r\n    this.containerBottomElm = React.createRef();\r\n\r\n    const ratioWHArray = this.props.ratio.split(\":\");\r\n    this.ratioWH = ratioWHArray[0] / ratioWHArray[1];\r\n\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n    this.showImage = this.showImage.bind(this);\r\n    this.hideImage = this.hideImage.bind(this);\r\n  }\r\n\r\n  showImage(image) {\r\n    this.setState({\r\n      imageSrc: image.src,\r\n      imageText: image.caption,\r\n    });\r\n  }\r\n\r\n\r\n  hideImage() {\r\n    this.setState({\r\n      imageSrc: \"\",\r\n      imageText: \"\",\r\n    });\r\n\r\n\r\n    this.containerBottomElm.style.display = \"none\";\r\n    this.updateDimensions();\r\n  }\r\n\r\n\r\n  updateDimensions() {\r\n    const tabHeight = this.containerElm.current.offsetWidth / this.props.input.length / this.ratioWH;\r\n    this.containerElm.current.style.height = `${tabHeight}px`;\r\n\r\n    const bottomHeight = this.containerBottomElm.current.offsetWidth / this.ratioWH;\r\n    this.containerBottomElm.current.style.height = `${bottomHeight}px`;\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    this.updateDimensions();\r\n    window.addEventListener(\"resize\", this.updateDimensions);\r\n  }\r\n\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.updateDimensions);\r\n  }\r\n\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.imageSrc !== \"\") {\r\n      this.containerBottomElm.current.style.display = \"block\";\r\n      this.updateDimensions();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"lp-tab-gallery\">\r\n        <div className=\"container\" ref={this.containerElm}>\r\n          {\r\n            this.props.input.map((image, index) => {\r\n              return (\r\n                <div\r\n                  key={index}\r\n                  className=\"image-wrapper\"\r\n                  style={{\r\n                    width: `${1 / this.props.input.length * 100}%`,\r\n                    height: `100%`\r\n                  }}\r\n                >\r\n                  <img\r\n                    className=\"image\"\r\n                    src={image.src}\r\n                    alt={image.caption}\r\n                    onClick={() => this.showImage(image)}\r\n                  />\r\n                </div>\r\n              )\r\n            })\r\n          }\r\n        </div>\r\n\r\n        <div className=\"container-bottom\" ref={this.containerBottomElm}>\r\n          <img \r\n            className=\"image\" \r\n            src={this.state.imageSrc} \r\n            alt={this.state.imageText} \r\n          />\r\n          <span className=\"close-btn\" onClick={() => this.hideImage()}>Ã—</span>\r\n          <div className=\"image-text\">{this.state.imageText}</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport './App.css';\n\nimport TabGallery from './components/TabGallery/TabGallery';\nimport img1 from './image/img1.jpg';\nimport img2 from './image/img2.jpg';\nimport img3 from './image/img3.jpg';\n\nconst collection = [\n  { src: img1, caption: \"Caption eleven\" },\n  { src: img2, caption: \"Caption twelve\" },\n  { src: img3, caption: \"Caption thirteen\" },\n];\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h2>Tab Gallery</h2>\n        <p>Click on each image below to show the corresponding image.</p>\n\n        <TabGallery\n          input={collection}\n          ratio={`3:2`}\n        />\n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}